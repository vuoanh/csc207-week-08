package edu.grinnell.sortingvisualizer.sorts;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

import edu.grinnell.sortingvisualizer.sortevents.CompareEvent;
import edu.grinnell.sortingvisualizer.sortevents.CopyEvent;
import edu.grinnell.sortingvisualizer.sortevents.SortEvent;

public class MergeSort {
	
	private static ArrayList<SortEvent> mergeList;
	
	/* helper method help merge two sub arrays and put the merged array into outArr */
	public static <T extends Comparable<? super T>> void merge(T[] arr, int leftPos, int rightPos, T outArr[], int rightEnd){
		int ElementNum = rightEnd - leftPos +1;
		int leftEnd = rightPos - 1;
		int tmpPos = leftPos;
		// Compare first element of each of left and right sub arrays.
		// Copy the smaller element to outArr
		while(leftPos <= leftEnd && rightPos <= rightEnd){
			ArrayList<Integer> compareIndArr = new ArrayList<Integer>();
			compareIndArr.add(leftPos);
			compareIndArr.add(rightPos);
			SortEvent<T> compareEvent = new CompareEvent<T>(arr, compareIndArr);
			mergeList.add(compareEvent);
			// compare Event
			if (arr[leftPos].compareTo(arr[rightPos]) < 0){
				ArrayList<Integer> copyIndArr = new ArrayList<Integer>();
				copyIndArr.add(tmpPos++);
				SortEvent<T> copyEvent = new CopyEvent<T>(arr, compareIndArr, arr[leftPos++]);
				mergeList.add(compareEvent);
				// copy event
				copyEvent.apply(outArr);
			}
			else {
				ArrayList<Integer> copyIndArr = new ArrayList<Integer>();
				copyIndArr.add(tmpPos++);
				SortEvent<T> copyEvent = new CopyEvent<T>(arr, compareIndArr, arr[rightPos++]);
				mergeList.add(compareEvent);
				//copy event
				copyEvent.apply(outArr);
			}
		}
		// if right sub array is out of element
		while(leftPos <= leftEnd){
			outArr[tmpPos++] = arr[leftPos++];
		}
		while(rightPos <= rightEnd){
			outArr[tmpPos++] = arr[rightPos++];
		}
		// Copy outArr back to arr
		arr = outArr.clone();
	}
	/* Helper mergeSort for mergeSort method. 
	 * Recursively devide the array into left and right sub arrays
	 * Then, recursively merge left and right sub arrays by using merge method
	 *  */
	public static <T extends Comparable<? super T>> void mergeSortHelper(T arr[], int lower, int upper, T[] tmpArr){
		if (upper > lower) {
			int mid = lower + (upper - lower) /2;
			mergeSortHelper(arr, lower, mid,tmpArr);
			mergeSortHelper(arr, mid+1, upper, tmpArr);
			merge(arr, lower, mid + 1, tmpArr, upper);
		}
	}
	public static <T extends Comparable<? super T>> ArrayList<SortEvent> mergeSort(T arr[]){
		T[] tmpArr = (T[]) new Object[arr.length];
		mergeSortHelper(arr, 0, arr.length-1, tmpArr);
		return mergeList;
	}
}
