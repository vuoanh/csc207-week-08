package edu.grinnell.sortingvisualizer.sorts;

import java.util.ArrayList;

import edu.grinnell.sortingvisualizer.sortevents.SortEvent;
import edu.grinnell.sortingvisualizer.sortevents.SwapEvent;

public class SelectionSort {
	
	private static ArrayList<SortEvent> selectionList;
	
	public static <T extends Comparable<? super T>> ArrayList<SortEvent> SelectionSort(T[] arr) { 
		SelectionSortHelper(arr, 0, arr.length);
		return selectionList;
	}
	
	public static<T extends Comparable<? super T>> void SelectionSortHelper(T[] arr, int low, int high){
		if (low == high){
			return;
		} else {
			T min = arr[low];
			int minInd = low;
			for (int i = low + 1; i < high; i++) {
				if (arr[i].compareTo(min) < 0) {
					min = arr[i];
					minInd = i;
				}
			}
			// swap event
			ArrayList<Integer> indArr = new ArrayList<Integer>();
			indArr.add(minInd);
			indArr.add(low);
			SortEvent<T> swapEvent = new SwapEvent<T>(arr, indArr);
			swapEvent.apply(arr);
			selectionList.add(swapEvent);
			SelectionSortHelper(arr, low + 1, high);
		}
	}
}
