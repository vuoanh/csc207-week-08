import java.util.ArrayList;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;

import javax.sound.midi.MidiUnavailableException;
import javax.swing.JFrame;
import edu.grinnell.sortingvisualizer.sortevents.SortEvent;
import edu.grinnell.sortingvisualizer.sorts.Sorts;

public class SortingVisualizer {
	
	

	JFrame Frame = new JFrame();

	public static final Integer[] chromaticNotes =
		    new Integer[] { 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
		                  , 50, 51, 52, 53, 54, 55, 56, 57, 58, 59
		                  , 60, 61, 62, 63, 64, 65, 66, 67, 68, 69
		                  , 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 };
	
	public static <T extends Comparable<? super T>> void main(String[] args) throws MidiUnavailableException{
		// Prompt user input to get the Integer, width, and height
		
		Integer[] arr = {3,2,9,7, 22, 10,7,30,20}; 
		int width = 500;
		int height = 500;
		ArrayList<Integer> affectedIndices = new ArrayList<Integer>();

		// Create the array used in sound sorting
		Integer[] displayArr = arr.clone();
		// Create a list of SortEvent after sorting the arr
		ArrayList<SortEvent> eventList = Sorts.InsertionSort(arr);
		// Initiate an Iterator
		Iterator<SortEvent> iter = eventList.iterator();

		// Make a frame and panel
		final Scale scale = new Scale(chromaticNotes);
		JFrame frame = new JFrame(); // get a new frame
		frame.setTitle("Sorting Visualizer"); // set title
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //close when there is no task to do
		frame.setResizable(false); // Disables resizing of the frame
		ArrayPanel panel = new ArrayPanel(displayArr, width, height, arr[arr.length - 1], affectedIndices);
		frame.add(panel); // add the panel into frame to display it
		frame.pack();
		frame.setVisible(true);
		
		// Create timer and timer task object to repeatedly run the sorting display
		TimerTask task = new TimerTask() {
			@Override
			public void run(){
				if (iter.hasNext()){
					SortEvent sortEvent = iter.next();
					ArrayList<Integer> tempList = sortEvent.getAffectedIndices();
					for(int i = 0; i < tempList.size(); i++){
						scale.playNote(tempList.get(i), sortEvent.isEmphasized());
					}
					sortEvent.apply(displayArr);
					affectedIndices.clear();
					for(int i = 0; i < tempList.size(); i++){
						affectedIndices.add(tempList.get(i));
					}
					panel.repaint();
					
				}
				else cancel();
			}
		};
		Timer tasks = new Timer();
		tasks.schedule(task, 0, 100);
	}
}
