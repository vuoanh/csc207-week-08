package edu.grinnell.sortingvisualizer.sorts;
import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class QuickSort {
	public static int[] BaseSort(int arr[], int left, int right){
		for(int i = left; i < right; i++){
			for(int j = i+1; j > left; j--){
				if(arr[j] < arr[j-1]){
					swap(arr, j, j-1);
				} else break;
			}
		}
		return arr;
	}

	public static int[] QuickSort(int[] arr){
		return QuickSortHelper(arr, 0, arr.length-1);
	}

	public static int[] QuickSortHelper(int arr[],int left, int right){
		if(left >= right - 2){ //when there's no more than three elements in left
			BaseSort(arr, left, right); //sort the remaining array of length three
		}
		else {
			int pivot = 0;
			int middle = (left + right)/2;
			//creating pivot according to finding median of first, middle, and last
			if(arr[right] < arr[left]){
				swap(arr, right, left);
			}
			if(arr[left] > arr[middle]){
				swap(arr, left, middle);
			}
			if(arr[middle] > arr[right]){
				swap(arr, right, middle);
			}
			pivot = arr[middle];
			swap(arr, middle, right); //bc "right" is greater than middle, 
			//swap middle to the index before right to create pivot
			//go through array and swap
			//i = low && j = high
			int i = left;
			int j = right;
			while(i < j){
				//increments i until it is untrue (fixes i to an index)
				while(arr[++i] < pivot); 
				//decrements j until it is untrue (fixes j to an index)
				while(arr[--j] > pivot); 
				if(i >= j){
					break; //stop the "pointers"
				}
				swap(arr, i, j);
			}
			swap(arr, right, i);
			QuickSortHelper(arr, left, i-1);
			QuickSortHelper(arr, i+1, right);
		}
		return arr;
	}
	public static void swap(int arr[], int indexOne, int indexTwo){
		int temp = arr[indexOne];
		arr[indexOne] = arr[indexTwo];
		arr[indexTwo] = temp;
	}

	public static void main(String args[]){
		Random rdom = ThreadLocalRandom.current();
		int length = rdom.nextInt(25);
		int[] arrayOne = new int[length];
		for(int i = 0; i < length; i++){
			arrayOne[i] = rdom.nextInt(50);
		}
		System.out.println(Arrays.toString(arrayOne));
		QuickSort(arrayOne);
		System.out.println(Arrays.toString(arrayOne));
	}
}

